@startuml
title Diagramme de Classe pour LabyJeu avec Moteur de Jeu

interface Jeu {
    +update(secondes: double, clavier: Clavier): void
    +init(): void
    +etreFini(): boolean
}

class LabyJeu {
    - <final> laby: Labyrinthe

    +LabyJeu(labyrinthe: Labyrinthe)
    +update(secondes: double, clavier: Clavier): void
    +init(): void
    +etreFini(): boolean
    +getLaby(): Labyrinthe
}

interface DessinJeu {
    +dessinerJeu(jeu: Jeu, canvas: Canvas): void
}

class LabyJeu {
    - <final> laby: Labyrinthe

    +LabyJeu(labyrinthe: Labyrinthe)
    +update(secondes: double, clavier: Clavier): void
    +init(): void
    +etreFini(): boolean
    +getLaby(): Labyrinthe
}

class LabyDessin {
    +<static> tailleCase: int
    +dessinerJeu(jeu: Jeu, canvas: Canvas): void
}

class Labyrinthe {
    +murs : boolean[][]


    +deplacerPerso(direction: int): void
    +etreFini(): boolean
    +getSuivant(x: int, y: int, action: String): int[]
    +Labyrinthe(nom: String)
    +deplacerPerso(action: String): void
    +getLengthY(): int
    +getLength(): int
    +getMur(x: int, y: int): boolean
    +getPsecret(x: int, y: int): int
    +getPersonnage(): int[]
}

class Clavier {
    +haut: boolean
    +bas: boolean
    +gauche: boolean
    +droite: boolean
    +appuyerTouche(event: KeyEvent): void
    +relacherTouche(event: KeyEvent): void
}

class MoteurJeu {
    -FPS: double
    -dureeFPS: double
    -WIDTH: double
    -HEIGHT: double
    -frameStats: FrameStats
    -jeu: Jeu
    -dessin: DessinJeu
    -controle: Clavier
    +launch(jeu: Jeu, dessin: DessinJeu): void
    +setFPS(FPSSouhaitees: int): void
    +setTaille(width: double, height: double): void
    +start(primaryStage: Stage): void
    -startAnimation(canvas: Canvas): void
}

class Perso {
    +x: int
    +y: int
    +Perso(dx: int, dy: int)
    +etrePresent(x: int, y: int): boolean
    +getX(): int
    +getY(): int
}

abstract class Declenchable {
    -x: int
    -y: int
    -id: int
    +Declenchable(id: int, dx: int, dy: int)
    +abstract action(laby: Labyrinthe): void
    +entitePresent(laby: Labyrinthe): void
    +etrePresent(dx: int, dy:int): boolean
    +getX(): int
    +getY(): int
    +getID(): int
}

class PassageSecret{
    -id: int
    -x: int
    -y: int
    -ouverte: boolean
    +PassageSecret(id: int, dx: int, dy: int)
    +ouvrirPorte(): void
    +getID(): int
}

class Ouverture{
    +Ouverture(id: int, dx: int, dy: int)
    +action(laby: Labyrinthe): void
}

class Fermeture{
    +Fermeture(id: int, dx: int, dy: int)
    +action(laby: Labyrinthe): void
}

abstract class Entite{
    -x: int
    -y: int
    -pv: int
    -laby: Labyrinthe
    +Entite(x: int, y: int)
    +Entite(x: int, y: int, pv: int, laby: Labyrinthe)
    +etrePresent(dx: int, dy: int): boolean
    +getX(): int
    +getY(): int
    +collision(int[] xy): Entite
}

Jeu <|.. LabyJeu
LabyJeu --> Labyrinthe : -laby
MoteurJeu --> Jeu : -<static> jeu
MoteurJeu --> DessinJeu : -<static> dessin
MoteurJeu --> Clavier : -<static> clavier
DessinJeu <|.. LabyDessin
Labyrinthe "*"->"1" Perso : -pj
  Labyrinthe "*"-->"*" PassageSecret : -psecrets
Declenchable "*"<-"*" Labyrinthe : -declenchables
 Declenchable <|-- Ouverture
 Declenchable <|-- Fermeture
@enduml
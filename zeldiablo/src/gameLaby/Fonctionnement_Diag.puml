@startuml
title Diagramme de Classe pour LabyJeu avec Moteur de Jeu

top to bottom direction
skinparam linetype ortho

interface Jeu {
    +update(secondes: double, clavier: Clavier): void
    +init(): void
    +etreFini(): boolean
}

class LabyJeu {
    +<static> DERNIER_MOUVEMENT: String
    -timer: double
    +regen: double
    +rechargeFleche: double
    -updateFleche: double

    +LabyJeu(labyrinthe: Labyrinthe)
    +update(secondes: double, clavier: Clavier): void
    +init(): void
    +etreFini(): boolean
    +getLaby(): Labyrinthe
}

interface DessinJeu {
    +dessinerJeu(jeu: Jeu, canvas: Canvas): void
}

class LabyDessin {
    +<static> tailleCase: int
    +dessinerJeu(jeu: Jeu, canvas: Canvas): void

}

class Labyrinthe {
    +murs : boolean[][]


    +getSuivant(x: int, y: int, action: String): int[]
    +Labyrinthe(nom: String)
    +deplacerPerso(action: String): void
    +attaqueDirectionnel(String derniere_direction): void
    +mouvementsMonstres(): void
    +actoinnerItems(derniere_direction String): void
    +mouvementAleatoireMonstres(m: Monstre, v: List<Couple>): void
    +gestionEntite(): void
    +etreFini(): boolean
    +getLengthY(): int
    +getLength(): int
    +getMur(x: int, y: int): boolean
    +getPsecret(x: int, y: int): int
    +getMonstre(x: int, y: int): boolean
    +getPersonnage(): int[]
    +ajouterEntite(Entite e): void
    +ajouterItem(Item i): void
    +estVideCase(x: int, y: int): boolean
    +getCoffre(x: int, y: int): int
}

class Clavier {
    +haut: boolean
    +bas: boolean
    +gauche: boolean
    +droite: boolean
    +space: boolean
    +e: boolean
    +f: boolean
'    +i: boolean
    +appuyerTouche(event: KeyEvent): void
    +relacherTouche(event: KeyEvent): void
}

class MoteurJeu {
    -FPS: double
    -dureeFPS: double
    -WIDTH: double
    -HEIGHT: double
    -frameStats: FrameStats
    -jeu: Jeu
    -dessin: DessinJeu
    -controle: Clavier
    +launch(jeu: Jeu, dessin: DessinJeu): void
    +setFPS(FPSSouhaitees: int): void
    +setTaille(width: double, height: double): void
    +start(primaryStage: Stage): void
    -startAnimation(canvas: Canvas): void
}
class Monstre{
    + Monstre(x : int, y : int, pv : int, laby : Labyrinthe)
    + attaquer(perso : Perso) : int
             }


class Perso {
    -Perso(dx: int, dy: int)
    +mourir(): void
    +attaquer(monstre: Monstre): void
    +possedeAmulette(): boolean
    +utiliserCle(): void
    +selectionnerMeilleurArc(): Arc
    +ajouterInventaire(item: Item): void
    +getInventaire(): ArrayList<Item>
    +setInventaire(inventaire: ArrayList<Item>): void
    +setPv(): int
}

abstract class Declenchable {
    -id: int
    +Declenchable(id: int, x: int, y: int, laby:Labyrinthe)
    +abstract action(laby: Labyrinthe): void
    +entitePresent(laby: Labyrinthe): void
    +getID(): int
}

class PassageSecret{
    -id: int
    +PassageSecret(id: int, x: int, y: int)
    +ouvrir(): void
    +fermer(): void
    +isActive(): boolean
    +getID(): int
}

class Ouverture{
    +Ouverture(id: int, dx: int, dy: int)
    +action(laby: Labyrinthe): void
}

class Fermeture{
    +Fermeture(id: int, x: int, y: int)
    +action(laby: Labyrinthe): void
}

abstract class Entite{
    -pv: int
    -estVivant: boolean
    -laby: Labyrinthe
    +Entite(x: int, y: int, pv: int, laby: Labyrinthe)
    +Entite(x: int, y: int)
    +getPv(): int
    +setPv(pv: int): void
    +etreVivant(): boolean
    +mourir(): void
    +subirDegats(degats: int): void
    +collision(int[] xy): Entite
}

class Couple <<update>>{
    -fleches: ArrayList<Fleche>
    -nbFleches: int

    +Couple(x: int, y: int,degats:int, laby: Labyrinthe)
    +tirerFleche(direction: String): void
    +avancerFleches(): void
    +getFleches(): ArrayList<Fleche>
    +getNbFleches(): int
    +setNbFleches(nbFleches: int): void
}

class Arc extends Arme{
    -fleches: ArrayList<Fleche>
    -nbFleches: int

    +Arc(x: int, y: int,degats:int, laby: Labyrinthe)
    +tirerFleche(direction: String): void
    +avancerFleches(): void
    +getFleches(): ArrayList<Fleche>
    +getNbFleches(): int
    +setNbFleches(nbFleches: int): void
}

class Fleche extends Case{
    -direction: String

    +Fleche(direction: String, x: int, y: int, degats: int, laby: Labyrinthe)
    +avancer(): boolean
    +collision(): Entite
}
'    - dest : String
'    - cout : double
'
'    + Arc(dest : String, cout : double)
'    + getDest() : String
'    + getCout() : double
'    + toString() : String

class Arcs{
        - arcs : List<Couple>

        + Arcs()
        + ajouterArc(a : Couple) : void
        + getArcs() : List<Couple>
    }


class Dijkstra{
    +resoudre(g: GrapheListe, depart: String) : Valeur
    +toString() : String
              }
class GrapheListe{
    - noeuds : ArrayList<String>
    - graphe : String[][]

    + GrapheListe(laby: Labyrinthe, ghost: boolean)
    + getIndice(n : String) : int
    + ajouterArc(depart : String, destination : String, cout : double) : void
    + listeNoeuds() : List<String>
    + suivants(n : String) : List<Couple>
    + toString() : String
                 }

class Valeur{
    - valeur : Map<String, Double>
    - parent : Map<String, String>

    + Valeur()
    + setValeur(nom : String, valeur : double) : void
    + setParent(nom : String, parent : String) : void
    + getValeur(nom : String) : double
    + getParent(nom : String) : String
    + toString() : String
    + calculerChemin(destination : String) : List<String>
            }


    skinparam class {
        BackgroundColor<<update>> Pink
    }
    class Amulette  {
        +Amulette(dx:int, dy:int, laby:Labyrinthe)
    }

abstract class Item {
        +dansInventaire:boolean
        +Item(x:int, y:int, laby:Labyrinthe)
        +persoPresent():void
        +ramasserItem():void
        +inInventaire():boolean
    }

class Sortie {
    +Sortie(x:int, y:int, laby:Labyrinthe)
    +persoPresent():boolean
    +sortiePossible():boolean
}

abstract class Case {
    -x:int
    -y:int
    -laby:Labyrinthe
    +Case(x:int, y:int)
    +Case(x:int, y:int, laby:Labyrinthe)
    +getX():int
    +getY():int
    +getLaby():Labyrinthe
    +setX(x:int):void
    +setY(y:int):void
    +etrePresent(dx:int, dy:int):boolean
}

class Coffre extends Case{
    +static nbCoffres: int
    +Coffre(x:int, y:int, laby:Labyrinthe)
    +isActive():boolean
}
class Fantome extends Monstre{
    +Fantome(x:int, y:int, pv:int, laby:Labyrinthe)
}
class Cle {
    +Cle(dx:int, dy:int, laby:Labyrinthe)
}

abstract class Arme <<update>> {
    -degats:int
    +Arme(x:int, y:int, degats:int)
}

Item <|- Arme

Jeu <|.. LabyJeu
LabyJeu --> Labyrinthe : -laby
MoteurJeu -l-> Jeu : -<static> jeu
MoteurJeu -r-> DessinJeu : -<static> dessin
MoteurJeu --> Clavier : -<static> clavier
DessinJeu <|.. LabyDessin
Labyrinthe "*"-->"1" Perso : -pj
  Labyrinthe "*"-->"*" PassageSecret : -psecrets
Declenchable "*"<-u--"*" Labyrinthe : -declenchables
 Declenchable <|-- Ouverture
 Declenchable <|-- Fermeture

PassageSecret ---[hidden]r> Dijkstra
'Perso -r[hidden]-> Valeur
'Perso -[hidden]> GrapheListe
GrapheListe "*"-->"*" Arcs : - adjacence
Arcs "*"-->"*" Arc : - arcs
Perso -d-|> Entite
Monstre -u-|> Entite

'Labyrinthe "*"-> "*" Entite : +entites
Labyrinthe "*"--d> "*" Entite : +entites

'Ajout du SpriteManager
'Entite ..> SpriteManager : <<use>>
'LabyDessin ..> SpriteManager : <<use>>
'
'LabyDessin -> SpriteManager : -spriteManager
'Entite -> SpriteManager : -spriteManager
'SpriteManager -[hidden]-> LabyDessin

Labyrinthe -l> Sortie : -sortie
Labyrinthe "*"-down> "*" Item : +items

Entite -|> Case
Item -|> Case
Declenchable -u|> Case
PassageSecret --|> Case
Sortie -|> Case
'Sortie -[hidden]> PassageSecret
Labyrinthe -[hidden]> Case

'Case -[hidden]> Ouverture
Amulette -l-|> Item
GrapheListe -[hidden]r-> Dijkstra
Cle -|> Item



@enduml